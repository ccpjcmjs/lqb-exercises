package basics;
import java.util.Scanner;
public class Main30 {
/**		阶乘计算(高精度)
 * 	时间限制：1.0s   内存限制：512.0MB
 * 	问题描述
　　	输入一个正整数n，输出n!的值。
　　	其中n!=1*2*3*…*n。
 * 	算法描述
　　		n!可能很大，而计算机能表示的整数范围有限，需要使用高精度计算的方法。使用一个数组A来表示一个大整数a，
	A[0]表示a的个位，A[1]表示a的十位，依次类推。
　　		将a乘以一个整数k变为将数组A的每一个元素都乘以k，请注意处理相应的进位。
　　		首先将a设为1，然后乘2，乘3，当乘到n时，即得到了n!的值。
 * 	输入格式
　　		输入包含一个正整数n，n<=1000。
 * 	输出格式
　　		输出n!的准确值。
 * 	样例输入
		10
	样例输出
		3628800
 * 	时间	140ms
 * 	内存	23.84MB
 * 
 * */
	public static void main(String[] args) {
		Scanner sca = new Scanner(System.in);
		int n = sca.nextInt();
		int i,j;
		int r=0;	//进位
		int temp;	//存放转换值
		int max = 4000; //最大界
		int []a = new int[max];
		a[0] = 1; // 直接从二开始计算
		
		for(i=2;i<=n;i++)
			for(j=0;j<max;j++) {
				temp = a[j]*i + r;	
				r = temp/10;  //大于十进位
				a[j] = temp%10; //取余位
			}
		//找到数组a中不为0的下标 避免输出0
		for(i=max-1;i>=0;i--) {
			if(a[i]!=0)	//找到之后退出循环
				break;
		}
		//输出数组
		for(j=i;j>=0;j--)
			System.out.print(a[j]);
	}

}
