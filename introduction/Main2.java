package introduction;
import java.util.Scanner;
public class Main2 {
/**		最大最小公倍数	(贪心)
 * 	时间限制：1.0s   内存限制：256.0MB
 * 	问题描述
 *	已知一个正整数N，问从1~N中任选出三个数，他们的最小公倍数最大可以为多少。
 * 	输入格式
 *	输入一个正整数N。
 * 	输出格式
 * 	输出一个整数，表示你找到的最小公倍数。
 * 	样例输入
 * 	9
 * 	样例输出
 * 	504
 * 	数据规模与约定
 * 	1 <= N <= 106。
 * 	时间	140ms
 * 	内存	21.63MB
 * 	解析 ：
 * 		已知三个数a b c 它们的最大公倍数为a*b*c时最大 ，且必须满足a ，b ，c两两互质时 
 * 		由此我们分析当1 ~ N之间选三个数求最大公倍数 我们知道相邻两个整数 互质，相邻两个奇数互质 ，所以
 * 
 * 		1 、当N为奇数时 N和N-1互质 N-1和N-2互质 ，N和N-2为相邻奇数 也互质 所以当N为奇数时结果为N*(N-1)*(N-2) 
 * 
 * 		2、当N为偶数时 相邻偶数不互质 根据贪心算法 用更小的数替代N-2 即为N*(N-1)*(N-3) 这时就想到另一种情况 
 * 			当N为3的倍数如6 此时 6和3不互质 所以就用更小的数替代N-3 如N-4此时又出现相似情况如8 4   N-5 如  10 5
 * 			所以我们就替换中间的数即 N-2 就发现又和之前一样所以就放弃替换中间的 用更小的数替换N 即为 (N-1)*(N-2)*(N-3)
 * 			发现可以了 应为这又和N为奇数的情况一样了 所以 
 * 
 * 			2.1、当N为偶数时 且N为3的倍数时 结果为(N-1)*(N-2)*(N-3) 
 * 			2.2、N为偶数时 且N不为3的倍数时 结果为	N*(N-1)*(N-3)
 * 
 * 		所以此题需要满足两个条件 ：1、三个数两两互质
 * 						 2、满足1的前提下 ，取最大
 */
	public static void main(String[] args) {
		Scanner sca = new Scanner(System.in);
		long N = sca.nextInt();
		long result;
		if(N % 2 != 0) {
			result = N*(N-1)*(N-2);
		}
		else {
			if(N % 3 == 0) {
				result = (N-1)*(N-2)*(N-3);
			}
			else {
				result = N*(N-1)*(N-3);
			}
		}
		System.out.println(result);
	}

}
